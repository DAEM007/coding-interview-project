// ============= HASH TABLES =================

// === what are hash Tables? ===
// Hash Tables otherwise known as Hash Maps are data structures used to store key-value pairs.
// Hash Tables are like arrays, but the keys are not ordered.
// unlike arrays, Hash Tables are fast for the following operations: finding values, adding values and
// removing values.

// ===== what are hash/hashing functions? =====
// Hashing functions are functions that convert keys to valid array indices.

// Here is an example of a basic hashing function...
// Note: This hashing function only works for key...we would improve as we go further
function hash(key, arrayLen) {
  let total = 0;
  for (let char of key) {
    let value = char.charCodeAt(0) - 96;
    total = (total + value) % arrayLen;
  }
  return total;
}

// console.log(hash("purple", 11));

// Note: From our above hash function, we have a bit of problem. some of these includes:
// 1. our hashing function works for just strings.
// 2. our function doesn't carry out it's operation in constant time - 0(1).
// 3. our function doesn't really distributes...cos there could be a lot of repetitions(collisions).

// Now, let's improve our hashing function...
function hashImproved(key, arrayLen) {
  let total = 0;
  let WEIRD_PRIME = 31;
  for (let i = 0; i < Math.min(key.length, 100); i++) {
    let char = key[i];
    let value = char.charCodeAt(0) - 96;
    total = (total * WEIRD_PRIME + value) % arrayLen;
  }
  return total;
}

// console.log(hashImproved("indigo", 13));

// Note: One thing to observe is the use of a variable we called "WEIRD_PRIME". It's very
// important to note that primes are very helpful in spreading out the keys more uniformly.

// ==== what are collisions in hash tables? =====
// A collision occurs when more than one value to be hashed by a particular hash function hash to
// the same slot in the table or data structure (hash table) being generated by the hash function.

// ==== How do we handle collisions? ====
// Even with a large array and a great hash function, collisions are inevitable.

// Note: There are several strategies to handle collisions...however, we would just talk about two of
// them...these includes:

// 1. separate chaining: This involves storing data in a more sophisticated data structure...for
// example...array or linked list. This method allows us to store multiple key-value pairs at the
// same index.

// 2. Linear Probing: With Linear probing, when we find a collision, we search through the array to find
// the next empty (available) slot. This method allows us to store single key-value pairs at each index.

// Now with these in mind, let's go ahead and build our hash table class.
class HashTable {
  constructor(size = 53) {
    this.keyMap = new Array(size);
  }
  _hash(key) {
    let total = 0;
    let WEIRD_PRIME = 31;
    for (let i = 0; i < Math.min(key.length, 100); i++) {
      let char = key[i];
      let value = char.charCodeAt(0) - 96;
      total = (total * WEIRD_PRIME + value) % this.keyMap.length;
    }
    return total;
  }
  set(key, value) {
    let index = this._hash(key);
    if (!this.keyMap[index]) {
      this.keyMap[index] = [];
    }
    this.keyMap[index].push([key, value]);
  }
  get(key) {
    let index = this._hash(key);
    if (this.keyMap[index]) {
      for (let i = 0; i < this.keyMap[index].length; i++) {
        if (this.keyMap[index][i][0] === key) {
          return this.keyMap[index][i][1];
        }
      }
    }
    return undefined;
  }
  keys() {
    let keysArr = [];
    for (let i = 0; i < this.keyMap.length; i++) {
      if (this.keyMap[i]) {
        for (let j = 0; j < this.keyMap[i].length; j++) {
          if (!keysArr.includes(this.keyMap[i][j][0])) {
            keysArr.push(this.keyMap[i][j][0]);
          }
        }
      }
    }
    return keysArr;
  }
  values() {
    let valuesArr = [];
    for (let i = 0; i < this.keyMap.length; i++) {
      if (this.keyMap[i]) {
        for (let j = 0; j < this.keyMap[i].length; j++) {
          if (!valuesArr.includes(this.keyMap[i][j][1])) {
            valuesArr.push(this.keyMap[i][i][1]);
          }
        }
      }
    }
    return valuesArr;
  }
}

let ht = new HashTable(17);
ht.set("maroon", "#800000");
ht.set("yellow", "#FFFF00");
ht.set("olive", "#808000");
ht.set("salmon", "#FA8072");
ht.set("lightcoral", "#F08080");
ht.set("mediumvioletred", "#C71585");
ht.set("plum", "#DDA0DD");
ht.set("purple", "#DDA0DD");
ht.set("violet", "#DDA0DD");
console.log(ht);

// ht.keys().forEach(function(key){
//   console.log(ht.get(key));
// })

// Note: It is important to note that the time and space complexity of hashTables at average
// case for accessing, deleting and adding is o(1) run-time...but at worst case o(N) run-time.
